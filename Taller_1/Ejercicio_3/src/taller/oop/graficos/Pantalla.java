/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package taller.oop.graficos;

import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import taller.oop.logica.FileManager;
import taller.oop.logica.Tiempo;

/**
 *
 * @author enaldo1709
 */
public class Pantalla extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla
     */
    public Pantalla() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        modificarBtn = new javax.swing.JMenuItem();
        eliminarBtn = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        segundosField = new javax.swing.JTextField();
        horasField = new javax.swing.JTextField();
        minutosField = new javax.swing.JTextField();
        agregarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        limpiarBtn = new javax.swing.JButton();
        alertaLabel = new javax.swing.JLabel();

        modificarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/edit.png"))); // NOI18N
        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });
        jPopupMenu1.add(modificarBtn);

        eliminarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/delete.png"))); // NOI18N
        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });
        jPopupMenu1.add(eliminarBtn);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(211, 218, 227));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                guardarArchivo(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                cargarArchivo(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(198, 198, 198));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(50, 52, 61));
        jLabel1.setText("Tiempo");

        jLabel2.setText("Hora:");

        jLabel3.setText("Minutos:");

        jLabel4.setText("Segundos:");

        segundosField.setBackground(new java.awt.Color(255, 255, 255));
        segundosField.setForeground(new java.awt.Color(50, 52, 61));
        segundosField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        horasField.setBackground(new java.awt.Color(255, 255, 255));
        horasField.setForeground(new java.awt.Color(50, 52, 61));
        horasField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        minutosField.setBackground(new java.awt.Color(255, 255, 255));
        minutosField.setForeground(new java.awt.Color(50, 52, 61));
        minutosField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        agregarBtn.setBackground(new java.awt.Color(198, 198, 198));
        agregarBtn.setForeground(new java.awt.Color(28, 36, 74));
        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Registro NÂ°", "Hora", "Minutos", "Segundos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sowPopUp(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        limpiarBtn.setBackground(new java.awt.Color(211, 218, 227));
        limpiarBtn.setForeground(new java.awt.Color(28, 36, 74));
        limpiarBtn.setText("Limpiar");
        limpiarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(segundosField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minutosField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horasField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(agregarBtn)
                            .addComponent(limpiarBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(alertaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(horasField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(minutosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(segundosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(agregarBtn)
                .addGap(25, 25, 25)
                .addComponent(alertaLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(limpiarBtn)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setTabla() {
        fillData();
        try {
            Object[][] dataset = new Object[this.data.size()][5];
            for (int i = 0; i < dataset.length; i++) {
                Object[] objects = this.data.get(i);
                dataset[i] = objects;
            }
        
            tabla.setModel(new javax.swing.table.DefaultTableModel(
                dataset,
                new String [] {
                   "Registro NÂ°", "Hora", "Minutos", "Segundos"
                }
            ) {
                Class[] types = new Class [] {
                   Integer.class, Integer.class, Integer.class, Double.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });
        } catch(Exception e) {
            
        }
        
    }
    
    private void fillData() {
        this.data = new ArrayList<Object[]>();
        this.contador = 1;
        for (Tiempo t : this.tiempos) {
            this.data.add(t.toArray(contador));
            contador++;
        }
    }
    
    private void alertar(ImageIcon icono, String mensaje) {
        alertaLabel.setText(mensaje);
        alertaLabel.setIcon(icono);
    }
    
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        try{
            this.tiempos =  (this.tiempos ==null)?(new ArrayList<Tiempo>())
                    :this.tiempos;
            int horas = Integer.parseInt(horasField.getText());
            int minutos = "".equals(minutosField.getText())?0:Integer
                    .parseInt(minutosField.getText());
            double segundos = "".equals(segundosField.getText())?0:Double
                    .parseDouble(segundosField.getText());
            horas = horas==24?0:horas;
            
            if (horas > 24) {
                alertar(iconoAlerta,"Las horas no pueden ser mÃ¡s de 24.");
            } else if (minutos >= 60) {
                alertar(iconoAlerta,"Los minutos no pueden ser mÃ¡s de 59.");
            } else if (segundos >= 60) {
                alertar(iconoAlerta,"Los segundos no pueden ser mÃ¡s de 59.");
            } else {
                alertar(null,"");
                this.tiempos.add(new Tiempo(horas, minutos, segundos));
                limpiarPantalla();
                setTabla();
            }
            
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: Valores no vÃ¡lidos", 
                    "Error al agregar entrada", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void limpiarPantalla() {
        this.horasField.setText("");
        this.minutosField.setText("");
        this.segundosField.setText("");
    }
    
    private void limpiarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarBtnActionPerformed
        try{
            int opt = JOptionPane.showConfirmDialog(tabla, "Â¿Desea eliminar todas las entradas?");
            if (opt == 0) {
                this.tiempos = new ArrayList<Tiempo>();
                limpiarPantalla();
                setTabla();
            }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_limpiarBtnActionPerformed

    private void cargarArchivo(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cargarArchivo
        try {
            if (WindowEvent.WINDOW_OPENED==evt.getID()){
                this.tiempos = FileManager.cargarArchivo(filepath);
            }
        } catch (FileNotFoundException e){
            try {
                FileManager.crearArchivo(filepath);
            } catch (IOException ex){
                JOptionPane.showMessageDialog(this, "Error: No se pudo crear el archivo de datos.", 
                    "Error al crear archivo.", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Error: No se pudo cargar los datos del archivo.", 
                    "Error al cargar datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        setTabla();
    }//GEN-LAST:event_cargarArchivo

    private void guardarArchivo(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_guardarArchivo
        try {
            if (WindowEvent.WINDOW_CLOSING==evt.getID()) {
                if (tiempos==null) {
                    tiempos=new ArrayList<Tiempo>();
                }
                FileManager.guardarArchivo(filepath, tiempos);
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(this, "Error: No se pudo guardar el archivo de datos.", 
                    "Error al guardar datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_guardarArchivo

    private void sowPopUp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sowPopUp
        if (SwingUtilities.isRightMouseButton(evt)) {
            jPopupMenu1.show(tabla, evt.getX(), evt.getY());
            this.rowValue = tabla.rowAtPoint(evt.getPoint());
        }
    }//GEN-LAST:event_sowPopUp

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        try {
            int horas = Integer.parseInt(JOptionPane.showInputDialog("Digite el valor de la hora:", 
                    this.tiempos.get(rowValue).getHoras()));
            String minutosValue = JOptionPane.showInputDialog("Digite el valor de los minutos:", 
                    this.tiempos.get(rowValue).getMinutos());
            int minutos = "".equals(minutosValue)?0:Integer.parseInt(minutosValue);

            String segundosValue = JOptionPane.showInputDialog("Digite el valor de los segundos:", 
                    this.tiempos.get(rowValue).getSegundos());
            double segundos = "".equals(segundosValue)?0:Double.parseDouble(segundosValue);
            horas = horas==24?0:horas;
            
            this.tiempos.remove(rowValue);
            this.tiempos.add(rowValue, new Tiempo(horas,minutos,segundos));
            limpiarPantalla();
            setTabla();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: No se pudo modificar la entrada.", 
                    "Error al modificar datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        try{
            this.tiempos.remove(rowValue);
            limpiarPantalla();
            setTabla();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error: No se pudo eliminar la entrada.", 
                    "Error al eliminar datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel alertaLabel;
    private javax.swing.JMenuItem eliminarBtn;
    private javax.swing.JTextField horasField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limpiarBtn;
    private javax.swing.JTextField minutosField;
    private javax.swing.JMenuItem modificarBtn;
    private javax.swing.JTextField segundosField;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
    private int rowValue;
    private final ImageIcon iconoAlerta = new ImageIcon(getClass().getResource("/resources/icons/warning.png"));
    private final String filepath = "./src/resources/data.json";
    private ArrayList<Object[]> data;
    private ArrayList<Tiempo> tiempos;
    private int contador;
}
